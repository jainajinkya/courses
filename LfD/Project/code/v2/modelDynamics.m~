function [muSet,covSet] = modelDynamics(x,mu,cov,u,mA,mB,mC)
nState = size(mu,1);
nGauss = size(mu,2);
nModel = size(mA,3);

mA = zeros(nState,nState,nModel);
mB = zeros(nState,nState,nModel);
mC = zeros(nState,nState,nModel);
% mA_ext = zeros(nState+1,nState+1,nModel);
% mB_ext = zeros(nState+1,nState+1,nModel);

muSet = zeros(nState,nGauss,nModel);
covSet = zeros(nState,nState,nGauss,nModel);

for i=1:nModel
   mA(:,:,i) = eye(nState) + normrnd(0,0.1)*eye(nState);
   mB(:,:,i) = eye(nState) + normrnd(0,0.1)*eye(nState);
   mC(:,:,i) = eye(nState) + normrnd(0,0.1)*eye(nState);
%    mA_ext(:,:,i) = [[mA(:,:,i)'; zeros(1,nState)]';0 0 0]';
%    mB_ext(:,:,i) = [mB(:,:,i); 0 0];
end


% Inclusion of covariance in the formulation

W = 0.5*(5.0-x(1))^2*eye(nOutput);

for k=1:nGauss
    for i=1:nModel
        gamma = mA(:,:,i)*cov(:,:,k)*mA(:,:,i)';
%         dg_dsig= mA(:,:,i)*mA(:,:,i)';
%         ds_dsig = dg_dsig - dg_dsig*mC(:,:,i)'*(inv(mC(:,:,i)*gamma*mC(:,:,i)' + W)*(mC(:,:,i)*gamma)) ...
%             + gamma*mC(:,:,i)'*(inv(mC(:,:,i)*gamma*mC(:,:,i)' + W)*(mC(:,:,i)*dg_dsig*mC(:,:,i)')*inv(mC(:,:,i)*gamma*mC(:,:,i)' + W)*(mC(:,:,i)*gamma)) ...
%             - gamma*mC(:,:,i)'*(inv(mC(:,:,i)*gamma*mC(:,:,i)' + W)*(mC(:,:,i)*dg_dsig));
%         
%         d_s_m = gamma*mC(:,:,i)'*(inv(mC(:,:,i)*gamma*mC(:,:,i)' + W)*((x(1)-5)*eye(size(W)))*inv(mC(:,:,i)*gamma*mC(:,:,i)' + W)*(mC(:,:,i)*gamma));  
%         mA_ext(3,:,i) = [d_s_m(1,1) 0  ds_dsig(1,1)];
        
        muSet(:,k,i) = mA(:,:,i)*mu(:,k) + mB(:,:,i)*u;
        covSet(:,:,k,i) = gamma - gamma*mC(:,:,i)'*(inv(mC(:,:,i)*gamma*mC(:,:,i)' + W))*(mC(:,:,i)*gamma);
    end
end

    




end